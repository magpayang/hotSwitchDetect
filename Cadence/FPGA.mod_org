use module "./SERDES_Pins.mod"
use module "./user_globals.mod"
--use module "./Functional.mod"

const

    -- FPGA RegSend/label constants
    FPGA_SRC_WR         = "srcf_wr"
    FPGA_SRC_RD         = "srcf_rd"
    FPGA_SRC_RST        = "srcf_rst"
    
    FPGA_DUMMY_SECONDWORD = 0x00000000
    gs_FPGA_Pattern     = "FPGA"
    LOOP_MODE           = 16#8000_0000

    
    KNOWN_DATA          = 0x12345678
    LAST_RAM_LOCATION   = 8191
    
    
    PATXMIT             = 0x01
    PATCMP              = 0x04


end_const

global

----------------------- FPGA Registers -------------------------------------------
   word   :  VPSA_REG              = 1
   word   :  VBRAM_WRITE_REG       = 6
   word   :  VBRAM_READ_REG        = 7
   word   :  BIT_MASK_REG          = 11         -- compare bit mask register
   word   :  CBIT                  = 14
   word   :  OREG                  = 17         -- IO Register (for controlling DNUT inputs)

   word   :  BAUDGENINC            = 21         -- Sets the UART communication Speed
   word   :  DUT_UART_SEND_DATA    = 22
   word   :  DUT_UART_ARB          = 23
   word   :  DUT_UART_IN_DATA      = 24
   word   :  DNUT1_UART_SEND_DATA  = 25
   word   :  DNUT1_UART_ARB        = 26
   word   :  DNUT1_UART_IN_DATA    = 27
   word   :  I2C_DIVIDER           = 28       -- Sets I2C Frequency
   word   :  DUT_I2C_SEND_DATA     = 29
   word   :  DUT_I2C_ARB           = 30
   word   :  DUT_I2C_IN_DATA       = 31
   word   :  DNUT1_I2C_SEND_DATA   = 32
   word   :  DNUT1_I2C_ARB         = 33
   word   :  DNUT1_I2C_IN_DATA     = 34
   word   :  OSC1FREQ              = 61
   word   :  HIZDEL_REG            = 62       -- Delay (in usec) for inputs to go HIZ after PWDN rising edge
   word   :  FWREV_REG             = 127       -- FirmWare Revision
   
 ------------------------------------------------------------------------------------------
    

end_global


procedure fpga_rw_datapair(FpgaName, OpCode, RegAddr, PatOffs, SecondWord)
--------------------------------------------------------------------------------
--  Writes a pair of 32-bit words to the SourceFPGA
--      Reads back the second word, if FpgaName is FPGA_*_RD ("*_rd")
--
in string[20]:          FpgaName        -- use the constants FPGA_SRC_WR, FPGA_SRC_RD between read or write
in word:                OpCode          -- 8bit FPGA OpCode
in word:                RegAddr         -- 8bit FPGA Register Address
in word:                PatOffs         -- 12bit Pattern Offset value
in_out multisite lword: SecondWord      -- 32bit Word to write as the second word, or read back during second word
--
--------------------------------------------------------------------------------

local
    multisite word:     msw[4]          -- two 32-bit data-words encoded into 4 16bit cadence-regsend-words
    multisite word:     tmp
    multisite lword:    capt32[1]       -- holds the digital capture vector
    boolean:            pat_ok          -- wait for digital ...: true if pattern finished/captured; false if timed out
    boolean:            readback=false  -- if set true, run 'digital capture' to grab data back
    
    string[20]:         FpgaRead = "FPGA_SRC_RD"
    string[20]:         FpgaWrite = "FPGA_SRC_WR"
    
end_local

body

    -- initialize data array to all 0s
    msw = 0x0000

    ----------------------------------------------------------------
    -- Determine if Read or Write from the register
    ----------------------------------------------------------------
    -- parse FpgaName to see if its _rd or _wr
    if FpgaName[5:7] ="_rd" then
        readback = true
    else
        readback = false
    end_if


    ----------------------------------------------------------------------------
    -- Build the Control Register 32-bit word from OpCode, RegAddr, and PatOffs
    ----------------------------------------------------------------------------
    -- MostSignificantWord of Control register ( [OpCode][RegAddr] ) goes in msw[site, 1]
    tmp = 0x0000
    tmp = tmp | ( (OpCode  & 0xFF) << 8 )
    tmp = tmp | ( (RegAddr & 0xFF) << 0 )
    if readback then
        tmp = tmp | 0x0100      -- set the read bit in lsb of the address byte for readback
    end_if
    scatter_1d(tmp, msw, 1) -- msw[site,1] = tmp[site], for all sites
    
    -- LeastSignificantWord of Control register ( [PatOffs] ) goes in msw[site, 2]
    tmp = PatOffs
    scatter_1d(tmp, msw, 2) -- msw[site,2] = tmp[site], for all sites

    ----------------------------------------------------------------
    -- Build the data value 32-bit word from SecondWord
    ----------------------------------------------------------------
    -- If readback, SecondWord is dummy 0s, else use parameter
    if readback then
        SecondWord = FPGA_DUMMY_SECONDWORD
    end_if

    -- MostSigWord of ValueToWrite goes in msw[site,3]
    tmp = word( (SecondWord>>16) & 0xFFFF )
    scatter_1d(tmp, msw, 3)
    
    -- LeastSigWord of ValueToWrite goes in msw[site,4]
    tmp = word( (SecondWord>> 0) & 0xFFFF )
    scatter_1d(tmp, msw, 4)

    ----------------------------------------------------------------
    -- RegSend the data to the FPGA
    ----------------------------------------------------------------
    load digital reg_send fx1 waveform FpgaWrite with msw
    enable digital reg_send fx1 waveform FpgaWrite
    if readback then
        enable digital capture fx1 waveform FpgaRead
    end_if

    execute digital pattern gs_FPGA_Pattern at label FpgaName run to end wait
    
    ----------------------------------------------------------------
    -- 'digital capture' the data from the FPGA SDOUT if readback
    ----------------------------------------------------------------
    if  readback then
        wait for digital capture waveform FpgaRead timeout 5ms into pat_ok     -- true if not timed out; false if timed out

        if pat_ok then
            read digital capture waveform FpgaRead into capt32
        else
            capt32 = 0xFEEDF00D
  --          hwcheck_PrintBannerMessage("TIMEOUT in fpga_rw_datapair()", "Digital Capture @""+FpgaRead+"@" timed out", "If this happens with KGU, ask TestEngineer for help")
        end_if
        SecondWord = gather_1d(capt32, 1) -- SecondWord[site] = capt32[site,1]

    end_if


end_body


procedure fpga_compose_data_pattern1
--------------------------------------------------------------------------
--
local
    lword              : PatternStartAddress
    lword              : PatternXLimit
    lword              : preamble[4]
    lword              : data[64]
    word               : idx
end_local
   
body
    

    --------------------------------
    -- DIN_Functionality patterns
    --------------------------------
    println(stdout, "Loading FPGA DATA Patterns")



    --            DIN 15......10_9........0


    preamble[1]       = 2#000000_0000001101
    preamble[2]       = 2#000000_0000000000
    preamble[3]       = 2#000000_0000000000
    preamble[4]       = 2#000000_0000000000


    for idx=1 to 32 by 2 do
          data[idx]   = 2#101010_1010101010
          data[idx+1] = 2#010101_0101010101
    end_for
    
    for idx=33 to 64 by 2 do
          data[idx]   = 2#010101_0101010101
          data[idx+1] = 2#101010_1010101010
    end_for


    PatternStartAddress = PAT1_ADDR 
    PatternXLimit = PAT1_SIZE
    
    fpga_load_pattern(PatternStartAddress, PatternXLimit, preamble, data)  -- load FPGA
    


end_body



procedure fpga_load_pattern(startAddr, xlimit, preamble, data)
--------------------------------------------------------------------------------
--
in lword        :  startAddr   -- value to go in ADDR register of both FPGAs
in lword        :  xlimit      -- value for the XLIMIT/CLIMIT registers
in lword:          preamble[4] -- four preamble vectors for this pattern
in lword        :  data[?]


local word            :  offs        -- pattern address offset
local multisite lword :  writeVal    -- value to write to the RAM address


body
 
    -- Write to pattern start address register
    writeVal = startAddr
    fpga_rw_datapair(FPGA_SRC_WR, 0x0, SDRAMPSA_REG, 0x00, writeVal)


    -- load preamble
    for offs = 0 to 3 do
        writeVal = preamble[offs+1]
        fpga_rw_datapair(FPGA_SRC_WR, 0x0, SDRAMLDEN_REG, offs, writeVal)
    end_for


    -- load pattern
    for offs = 4 to word(xlimit-1) do
        writeVal = data[offs-3]
	fpga_rw_datapair(FPGA_SRC_WR, 0x0, SDRAMLDEN_REG, offs, writeVal)
    end_for


end_body


procedure fpga_reset(FPGA)
--------------------------------------------------------------------------------
-- This function resets the FPGA SPI bus state machine and clears the registers
-- It does not clear BRAM (pattern) memory
in string[5]   : FPGA

body

    execute digital pattern gs_FPGA_Pattern at label FPGA_SRC_RST wait
    
end_body


procedure fpga_enable_site(action)
--------------------------------------------------------------------------------
-- This function enables clock and data from the FPGA
in string [3]    : action

local multisite   lword : data

body

    if(action == "ON") then
       data = 1
    else
       data = 0
    endif
    
    fpga_write_register(SITE_EN_REG, data)
    
end_body


procedure load_fpga_patterns
--------------------------------------------------------------------------------
--  This procedure loads patterns into FPGA RAM memory

local multisite lword   :  writeVal

body

   connect digital pin fpga_pattern_pins  to dcl
   set digital pin  fpga_pattern_pins levels to vil 0mV vih 3.2V vol 500mV voh 2.7V
   
   fpga_reset("FPGA1")
--   fpga_compose_data_pattern1
   
      
   -- Write KNOWN_DATA to CHECK_REG
   -- This will be checked in "Check_FPGA" procedure
--   writeVal = KNOWN_DATA
--   fpga_write_register(CHECK_REG, writeVal)

end_body


procedure Check_FPGA(force_load)
--------------------------------------------------------------------------------
--  This function checks a register in the FPGA
--  If the contents of this register has not changed then 
--  it is assumed power has not been lost and that the patterns in the RAM chip
--  are ok as well.
--  If data has changed, patterns are re-loaded
in boolean             : force_load

local multisite lword  : data
local word             : site, idx

body

   current_active_sites = get_active_sites()
   sites = word(len(current_active_sites))

   set digital pin fpga_pattern_pins levels to vil 0mV vih 3.2V vol 500mV voh 2.7V
   
-- Reset FPGA
   fpga_reset("FPGA1")
   
-- Set latch delay time 6000 = 6ms (maximum is 8.191ms)
 --  data = 6000
--   fpga_write_register(HIZDEL_REG, data)
-- 
-- 
--   data = fpga_read_register(CHECK_REG)


-- Reload patterns if data is not as expected   
--    for idx = 1 to sites do  
--        site = current_active_sites[idx]
--       if((data[site] <> KNOWN_DATA)  OR force_load)then
--          load_fpga_patterns
--          break
--       end_if
--    endfor

end_body




procedure fpga_write_register(FPGA, reg, data)
--------------------------------------------------------------------------------
--
in string[5]          : FPGA   -- "FPGA1" or "FPGA2"
in word               : reg    -- FPGA register to write to
in multisite lword    : data   -- data to be written to register

local word            : dev


body

     if FPGA == "FPGA1" then
        dev = 0x00
     elseif FPGA == "FPGA2" then
        dev = 0x40
     endif
     
     fpga_rw_datapair(FPGA_SRC_WR, dev, reg, 0x00, data)
       

end_body

function fpga_read_register(FPGA, reg) : multisite lword
--------------------------------------------------------------------------------
--  
in string[5]          : FPGA   -- "FPGA1" or "FPGA2"
in word               : reg    -- FPGA register to read from

local multisite lword : writeVal
local word            : dev

body

     if FPGA == "FPGA1" then
        dev = 0x00
     elseif FPGA == "FPGA2" then
        dev = 0x40
     endif

    fpga_rw_datapair(FPGA_SRC_RD, dev, reg, 0x00, writeVal)
    return(writeVal)

end_body








function fpga_compare_video_pattern(capture_addr, patsize, repeat_cnt, bits, compare_addr) : multisite lword
--------------------------------------------------------------------------------
--  This procedure begins pattern compare of the captured data
--  Result value is composed of 4 bits
--  bit[0] = 1 --> pattern compare is done
--  bit[1] = 1 --> pattern compared passed
--  bit[2] = 1 --> start of first frame was found
--  bit[3] = 1 --> at least 512 vectors were captured

in lword       :  capture_addr    -- beginning address of captured data (usually 0 unless changed to something else)
in lword       :  patsize         -- size (including pre-amble) of compare pattern
in lword       :  repeat_cnt      -- Repeat count. Number of times pattern will be looped for compare purposes.
in lword       :  bits            -- number of bits (bit-width) to compare
in lword       :  compare_addr    -- beginning address of the compare pattern


local multisite lword : writeVal
local word            : data
local multisite lword : rslt

body


    writeVal = capture_addr
    fpga_write_register(SDRAMPSA_REG, writeVal)
    
    writeVal = patsize
    fpga_write_register(VTPLIM_REG, writeVal)

    writeVal = repeat_cnt
    fpga_write_register(VCMPRPT_REG, writeVal)
    
    writeVal = 2^(bits) - 1
    fpga_write_register(BIT_MASK_REG, writeVal)
    
    writeVal = compare_addr
    fpga_write_register(SDRAMCPSA_REG, writeVal)
    
    writeVal = 0x0
    data = PATCMP
    fpga_rw_datapair(FPGA_SRC_WR, data, 0x0, 0x00, writeVal)  -- sets PATCMP bit to 1

    
-- Read Result
    wait(100us)  -- this may need adjustment based on number of vectors being compared
    rslt = fpga_read_register(VRESULT_REG)
    return(rslt)

end_body

procedure fpga_debug(data, failsites)
--------------------------------------------------------------------------------
--  Prints the result of failing sites to the screen
--  Also prints 10 vectors to the screen, 5 before and 5 after failing vector
in multisite lword     : data
in word list[8]        : failsites         -- failing sites


local integer          : idx
local multisite lword  : data2, data3, data4
local word             : csite
local lword            : stadd, endadd


body


    if( len(failsites) > 0) then
        data2 = fpga_read_register(VMATCHCNT_REG)
        data3 = fpga_read_register(VVCOUNT_REG)
        data4 = fpga_read_register(BITFAIL_REG)

        
        for idx= 1 to len(failsites) do
            csite = failsites[idx]
            println(stdout, "Site:", failsites[idx], "  Result =", data[csite])
            
            if(data2[csite] < 290 ) then
               println(stdout, "Match found at address =" ,data2[csite]-1)
               println(stdout, "Pattern Compare failed at SDRAM address ", data2[csite]+data3[csite]-1)
               println(stdout, "Failing bits are                         ", data4[csite]!b!z:16)
            else
               println(stdout, "No Match Found")
            endif
               

            
            
            if(data2[csite] < 290) then    -- if match was found display 5 vectors before and after first failure
               stadd  = data2[csite] + data3[csite] - 5
               endadd = data2[csite] + data3[csite] + 5
            else
               stadd = 0
               endadd = 49
            endif
            
            FPGA_Read_SDRAM_Memory(stadd, endadd, csite,"bin")

        endfor
    endif


end_body


procedure fpga_compose_data_pattern2
--------------------------------------------------------------------------
--
local
    lword              : PatternStartAddress
    lword              : PatternXLimit
    lword              : preamble[4]
    lword              : data[80]
    word               : idx
end_local
   
body
    

    --------------------------------
    -- DIN_Functionality patterns
    --------------------------------
    println(stdout, "Loading FPGA DATA Patterns")



    --            DIN 15......10_9........0


    preamble[1]       = 2#000000_0000111000
    preamble[2]       = 2#000000_0000000000
    preamble[3]       = 2#000000_0000000000
    preamble[4]       = 2#000000_0000000000


    for idx=1 to 40 by 2 do
          data[idx]   = 2#101010_1010101010
          data[idx+1] = 2#010101_0101010101
    end_for
    
    for idx=41 to 80 by 2 do
          data[idx]   = 2#010101_0101010101
          data[idx+1] = 2#101010_1010101010
    end_for


    PatternStartAddress = PAT2_ADDR
    PatternXLimit = PAT2_SIZE    

    fpga_load_pattern(PatternStartAddress, PatternXLimit, preamble, data)  -- load FPGA    


end_body


procedure fpga_Set_DNUT_Pins(FPGA,CFG2, CFG1, CFG0, PWDN, latch)
--------------------------------------------------------------------------------
-- This function is used to drive the DNUT pins. The DNUT pins are driven by an FPGA
-- The FPGA contains a register with the mapping : 
-- CFG1[2], CFG0[1], PWDN[0]

in string[5]           : FPGA      -- "FPGA1" or "FPGA2"
in word                : CFG2      --  0 or 1
in word                : CFG1      --  0 or 1
in word                : CFG0      --  0 or 1
in word                : PWDN      --  0 or 1
in boolean             : latch     -- true or false


local multisite  lword : data
local multisite  word  : temp


body


   -- CFG1[2], CFG0[1], PWDN[0]
   temp = (CFG2<<3) +(CFG1<<2) + (CFG0<<1)
   data = lword(temp)
   
   if latch then
      fpga_write_register(FPGA, OREG, data)  -- power down pin go to low
   endif
     
   -- Add PWDN value
      temp = temp + (PWDN<<0)
      data = lword(temp)
      fpga_write_register(FPGA, OREG, data)
   
   
end_body





procedure fpga_set_I2C_Frequency(FPGA, I2C_Freq)
--------------------------------------------------------------------------------
-- This procedure sets the I2C Frequency of the I2C Master within the FPGA
-- SYS_CLK is defined in user_globals.mod and is 150MHz

in string[5]   : FPGA         -- "FPGA1" or "FPGA2"
in  float      : I2C_Freq

local multisite lword : divider
local word            : dev

body

     divider = lword (SYS_CLK / (4.0 * I2C_Freq))          
     fpga_write_register(FPGA, I2C_DIVIDER, divider)


end_body

procedure fpga_I2C_Write(FPGA, dut_or_dnut, device_id, reg, bytes, data)
--------------------------------------------------------------------------------
-- This function will initiate an I2C Write transaction on the I2C pins connected to
-- the DNUT. Up to three bytes can be written with this function. I2C Frequency must
-- be previously set with the fpga_set_I2C_Frequency procedure.

in string[5] : FPGA         -- "FPGA1" or "FPGA2"
in string[4] : dut_or_dnut  -- "DUT" or "DNUT"
in lword     : device_id    -- I2C slave device ID
in lword     : reg          -- starting register address
in lword     : bytes        -- number of bytes to read (1,2, or 3)
in lword     : data         -- data to write

local multisite lword : id_reg
local multisite lword : i2c_data

body

     id_reg   = device_id + (reg << 8) + (bytes << 24)
     i2c_data = data
     

     if dut_or_dnut = "DUT" then
        fpga_write_register(FPGA, DUT_I2C_SEND_DATA, i2c_data)   -- this must be first
        fpga_write_register(FPGA, DUT_I2C_ARB, id_reg)           -- then this
        
     elseif dut_or_dnut = "DNUT" then
        fpga_write_register(FPGA, DNUT1_I2C_SEND_DATA, i2c_data)  -- this must be first
        fpga_write_register(FPGA, DNUT1_I2C_ARB, id_reg)          -- then this
     endif


end_body

function fpga_I2C_Read(FPGA, dut_or_dnut, device_id, reg, bytes) : multisite lword
--------------------------------------------------------------------------------
-- This function will initiate an I2C Read transaction on the I2C pins connected to
-- the DNUT. Up to three bytes can be read with this function. I2C Frequency must
-- be previously set with the fpga_set_I2C_Frequency procedure.

in string[5] : FPGA         -- "FPGA1" or "FPGA2"
in string[4] : dut_or_dnut  -- "DUT" or "DNUT"
in lword     : device_id    -- I2C slave device ID
in lword     : reg          -- starting register address
in lword     : bytes        -- number of bytes to read (1,2, or 3)

local multisite lword : id_reg
local multisite lword : i2c_data
local word            : fpga_reg1, fpga_reg2

body

     device_id = device_id + 1            -- set read bit
     id_reg    = device_id + (reg << 8) + (bytes << 24)
     
     if dut_or_dnut = "DUT" then
        fpga_reg1 = DUT_I2C_ARB
        fpga_reg2 = DUT_I2C_IN_DATA     
     elseif dut_or_dnut = "DNUT" then
        fpga_reg1 = DNUT1_I2C_ARB  
        fpga_reg2 = DNUT1_I2C_IN_DATA      
     endif 
 
 
     fpga_write_register(FPGA, fpga_reg1, id_reg) -- initiates I2C transaction
     


-- Read Captured I2C data
     i2c_data = fpga_read_register(FPGA, fpga_reg2)
     return(i2c_data)

end_body







procedure fpga_set_UART_Frequency(FPGA, UART_Freq)
--------------------------------------------------------------------------------
-- This procedure sets the I2C Frequency of the I2C Master within the FPGA
-- SYS_CLK is defined in user_globals.mod and is 150MHz

in string[5]  : FPGA         -- "FPGA1" or "FPGA2"
in  float     : UART_Freq


local multisite lword : baudgeninc
local multisite float : temp

body

     temp = 2^16.0 * (UART_Freq/SYS_CLK) + 0.5
     baudgeninc = lword (temp)
     fpga_write_register(FPGA, BAUDGENINC, baudgeninc)
     UART_FREQ = UART_Freq


end_body

procedure fpga_UART_Write(FPGA, dut_or_dnut, device_id, reg, bytes, data)
--------------------------------------------------------------------------------
-- This function will initiate a UART Write transaction on the UART pins connected to
-- the DUT or DNUT. Up to four bytes can be written with this function. UART Frequency must
-- be previously set with the fpga_set_UART_Frequency procedure.

in string[5] : FPGA         -- "FPGA1" or "FPGA2"
in string[4] : dut_or_dnut  -- "DUT" or "DNUT"
in lword     : device_id    -- UART slave device ID
in lword     : reg          -- starting register address
in lword     : bytes        -- number of bytes to read (1,2, or 3)
in lword     : data         -- data to write

local multisite lword : id_reg
local multisite lword : uart_data

body

     id_reg     = device_id + (reg << 8) + (bytes << 24)
     uart_data  = data


     if dut_or_dnut = "DUT" then
        fpga_write_register(FPGA, DUT_UART_SEND_DATA, uart_data)  -- this must be first
        fpga_write_register(FPGA, DUT_UART_ARB, id_reg)           -- then this
        
     elseif dut_or_dnut = "DNUT" then
        fpga_write_register(FPGA, DNUT1_UART_SEND_DATA, uart_data)  -- this must be first
        fpga_write_register(FPGA, DNUT1_UART_ARB, id_reg)           -- then this
     endif


     UART_wait(bytes)


end_body

function fpga_UART_Read(FPGA, dut_or_dnut, device_id, reg, bytes) : multisite lword
--------------------------------------------------------------------------------
-- This function will initiate an UART Read transaction on the UART pins connected to
-- the DUT or DNUT. Up to four bytes can be read with this function. UART Frequency must
-- be previously set with the fpga_set_UART_Frequency procedure.

in string[5] : FPGA         -- "FPGA1" or "FPGA2"
in string[4] : dut_or_dnut  -- "DUT" or "DNUT"
in lword     : device_id    -- UART slave device ID
in lword     : reg          -- starting register address
in lword     : bytes        -- number of bytes to read (1,2, or 3)

local multisite lword : id_reg
local multisite lword : uart_data
local word            : fpga_reg1, fpga_reg2

body

     device_id = device_id + 1            -- set read bit
     id_reg    = device_id + (reg << 8) + (bytes << 24)

     
     if dut_or_dnut = "DUT" then
        fpga_reg1 = DUT_UART_ARB
        fpga_reg2 = DUT_UART_IN_DATA     
     elseif dut_or_dnut = "DNUT" then
        fpga_reg1 = DNUT1_UART_ARB  
        fpga_reg2 = DNUT1_UART_IN_DATA      
     endif


     fpga_write_register(FPGA, fpga_reg1, id_reg) -- initiates UART transaction



-- Read captured UART data
     UART_wait(bytes)
     uart_data = fpga_read_register(FPGA, fpga_reg2) & (2^(8*bytes)-1)  -- mask out unused upper bytes
     return(uart_data)

end_body

procedure UART_wait(bytes)
--------------------------------------------------------------------------------
--  
in   lword    : bytes

local lword   : vectors
local float   : wait_time

body


     vectors = 66 + bytes * 11
     wait_time = float(vectors) / UART_FREQ
     
     if UART_FREQ < 20KHz then
        wait_time = wait_time * 1.1
     endif
     
     if wait_time > 300us then
        wait_time = wait_time - 300us
        wait(wait_time)
     endif


end_body

procedure fpga_cbit_control(FPGA, cbits)
--------------------------------------------------------------------------------
--  
in string[5]           : FPGA      -- "FPGA1" or "FPGA2"
in lword               : cbits

local multisite lword  : data

body

     data = cbits
     fpga_write_register(FPGA, CBIT, data)


end_body

